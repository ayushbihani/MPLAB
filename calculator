assume ds:data,cs:code
data segment
       scode db ?
       row db ?
       col db ?
       pa equ 20a0h
       pb equ 20a1h
       pc equ 20a2h
       cr equ 20a3h 
       
       op1 db ?
       op2 db ?
       continue db "press any key to continue $"
       plus equ 0Ch ;scancodes so u  can easily compare
       minus equ 0Dh
       result db ?
       linefeed db "0ah,0dh,$"
        
data ends

code segment

start:
        mov ax, data
        mov ds,ax       
        mov dx,cr
        mov al,90h
        out dx,al

repeat_comp:
        lea dx,linefeed
        mov ah,09
        int 21h
       
        call inkey  ;for getting the first number
        call delay ;calling delay because why not .jk its because input from keypad is cocky (energising patterns )
        mov al,scode
        dec al
        mov op1,al ;putting first number in operand1
        call display

        call inkey; for operation ( plus or minus)
        call delay
 

        cmp scode,plus 
        jz plus_code ;if plus go add or something
        cmp scode,minus
        je minus_code
        jmp done

   plus_code:
        mov dl,'+'
        mov ah,02
        int 21h
        
        call inkey; second numebr input
        call delay
        mov al,scode
        dec al
        mov op2,al ;2nd number in op2
        call display; display 2nd number
        mov al, op1
        add al,op2 ;add here
        mov result,al
        jmp done 
   minus_code:
        mov dl,'-'
        mov ah,02
        int 21h
        
        call inkey; op2
        call delay
        mov al,scode
        dec al
        mov op2,al
        call display;
        mov al, op1
        sub al,op2
        mov result,al
        jmp done

   done:
         
         
         mov dl,'='
         mov ah,02
         int 21h
         mov al,result
         call display
         lea dx,continue
         mov ah,09
         int 21h
         
         mov ah,06h ;for any onsole input
         mov dl,255
         int 21h
         
         
         jz repeat_comp
         jnz ending
  ending:             
        mov ah,4ch
        int 21h



inkey proc
        push ax ;push all 4 variables on stack so that it doesnt interfere abovee
        push bx
        push cx
        push dx

repeat: mov bl, 04  ;your regular keypad program (for taking input )
        mov bh, 03
        mov cl,10h
next_row: mov dx, pc
          mov al, bl
          out dx, al

          mov dx, pa
          in al, dx

        cmp al, 00h
        JNE go_ahead
        shr bl, 1
        sub cl,08       
        dec bh
        JNZ next_row
        jmp repeat

go_ahead:mov row, bh
        mov ah, 1

rot:    ror al, 1
        JC next
        inc ah
        inc cl
        
        jmp rot

next:   mov col,ah
        mov scode,cl
        

        pop dx
        pop cx
        pop bx
        pop ax
        ret
inkey endp



display proc
        push ax
        push bx
        push cx
        push dx

        aam
        add ax, 3030h
        mov bx, ax

        mov dl, bh
        mov ah, 2
        int 21h

        mov dl, bl
        mov ah, 2
        int 21h

        pop dx
        pop cx
        pop bx
        pop ax
        ret
display endp
delay proc
        push si
        push di
        mov si,0fffh
l2:
        mov di,0ffffh
l1:
        dec di
        jnz l1
        dec si
        jnz l1
        pop di
        pop si
        ret
delay endp

  code ends
  end start
